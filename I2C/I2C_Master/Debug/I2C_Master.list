
I2C_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000384  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000548  08000548  00001548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000550  08000550  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000550  08000550  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000550  08000550  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000550  08000550  00001550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000554  08000554  00001554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000558  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800055c  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800055c  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000010e4  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000486  00000000  00000000  00003118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  000035a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000146  00000000  00000000  00003770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001103  00000000  00000000  000038b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001908  00000000  00000000  000049b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1836  00000000  00000000  000062c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7af7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000570  00000000  00000000  000c7b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000c80ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000530 	.word	0x08000530

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000530 	.word	0x08000530

08000204 <main>:
// List of Function Declarations
void I2C1_Init(void);
void I2C1_Send(char saddr, int n, char* str);
void Delay(unsigned int ms);

int main(void){
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	I2C1_Init();
 8000208:	f000 f808 	bl	800021c <I2C1_Init>
	while(1){
		I2C1_Send(0x12, 4, "Miju");
 800020c:	4a02      	ldr	r2, [pc, #8]	@ (8000218 <main+0x14>)
 800020e:	2104      	movs	r1, #4
 8000210:	2012      	movs	r0, #18
 8000212:	f000 f88f 	bl	8000334 <I2C1_Send>
 8000216:	e7f9      	b.n	800020c <main+0x8>
 8000218:	08000548 	.word	0x08000548

0800021c <I2C1_Init>:
	}
}

void I2C1_Init(void){
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	RCC_AHB1ENR |= (1<<1);
 8000220:	4b3b      	ldr	r3, [pc, #236]	@ (8000310 <I2C1_Init+0xf4>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a3a      	ldr	r2, [pc, #232]	@ (8000310 <I2C1_Init+0xf4>)
 8000226:	f043 0302 	orr.w	r3, r3, #2
 800022a:	6013      	str	r3, [r2, #0]

	GPIOB_MODER |= (1<<19);
 800022c:	4b39      	ldr	r3, [pc, #228]	@ (8000314 <I2C1_Init+0xf8>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a38      	ldr	r2, [pc, #224]	@ (8000314 <I2C1_Init+0xf8>)
 8000232:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000236:	6013      	str	r3, [r2, #0]
	GPIOB_MODER &= ~(1<<18);
 8000238:	4b36      	ldr	r3, [pc, #216]	@ (8000314 <I2C1_Init+0xf8>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a35      	ldr	r2, [pc, #212]	@ (8000314 <I2C1_Init+0xf8>)
 800023e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000242:	6013      	str	r3, [r2, #0]
	GPIOB_MODER |= (1<<17);
 8000244:	4b33      	ldr	r3, [pc, #204]	@ (8000314 <I2C1_Init+0xf8>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a32      	ldr	r2, [pc, #200]	@ (8000314 <I2C1_Init+0xf8>)
 800024a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800024e:	6013      	str	r3, [r2, #0]
	GPIOB_MODER &= ~(1<<16);
 8000250:	4b30      	ldr	r3, [pc, #192]	@ (8000314 <I2C1_Init+0xf8>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a2f      	ldr	r2, [pc, #188]	@ (8000314 <I2C1_Init+0xf8>)
 8000256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800025a:	6013      	str	r3, [r2, #0]

	/*Set PB8 & PB9 output type to open-drain*/
	GPIOB_OTYPER |= (1<<8);
 800025c:	4b2e      	ldr	r3, [pc, #184]	@ (8000318 <I2C1_Init+0xfc>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a2d      	ldr	r2, [pc, #180]	@ (8000318 <I2C1_Init+0xfc>)
 8000262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000266:	6013      	str	r3, [r2, #0]
	GPIOB_OTYPER |= (1<<9);
 8000268:	4b2b      	ldr	r3, [pc, #172]	@ (8000318 <I2C1_Init+0xfc>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a2a      	ldr	r2, [pc, #168]	@ (8000318 <I2C1_Init+0xfc>)
 800026e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000272:	6013      	str	r3, [r2, #0]

	/*Set PB8 & PB9 to output pull-up*/
	GPIOB_PUPDR &= ~(1<<19);
 8000274:	4b29      	ldr	r3, [pc, #164]	@ (800031c <I2C1_Init+0x100>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a28      	ldr	r2, [pc, #160]	@ (800031c <I2C1_Init+0x100>)
 800027a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800027e:	6013      	str	r3, [r2, #0]
	GPIOB_PUPDR |= (1<<18);
 8000280:	4b26      	ldr	r3, [pc, #152]	@ (800031c <I2C1_Init+0x100>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a25      	ldr	r2, [pc, #148]	@ (800031c <I2C1_Init+0x100>)
 8000286:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800028a:	6013      	str	r3, [r2, #0]
	GPIOB_PUPDR &= ~(1<<17);
 800028c:	4b23      	ldr	r3, [pc, #140]	@ (800031c <I2C1_Init+0x100>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a22      	ldr	r2, [pc, #136]	@ (800031c <I2C1_Init+0x100>)
 8000292:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000296:	6013      	str	r3, [r2, #0]
	GPIOB_PUPDR |= (1<<16);
 8000298:	4b20      	ldr	r3, [pc, #128]	@ (800031c <I2C1_Init+0x100>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a1f      	ldr	r2, [pc, #124]	@ (800031c <I2C1_Init+0x100>)
 800029e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002a2:	6013      	str	r3, [r2, #0]

	/*Set PB8 & PB9 alternate function type to I2C (AF4)*/
	GPIOB_AFRH &= ~(0xFF<<0);
 80002a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000320 <I2C1_Init+0x104>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000320 <I2C1_Init+0x104>)
 80002aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80002ae:	6013      	str	r3, [r2, #0]
	GPIOB_AFRH |= (1<<2);
 80002b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000320 <I2C1_Init+0x104>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000320 <I2C1_Init+0x104>)
 80002b6:	f043 0304 	orr.w	r3, r3, #4
 80002ba:	6013      	str	r3, [r2, #0]
	GPIOB_AFRH |= (1<<6);
 80002bc:	4b18      	ldr	r3, [pc, #96]	@ (8000320 <I2C1_Init+0x104>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a17      	ldr	r2, [pc, #92]	@ (8000320 <I2C1_Init+0x104>)
 80002c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002c6:	6013      	str	r3, [r2, #0]

	I2C1_CR1 |= (1<<15);
 80002c8:	4b16      	ldr	r3, [pc, #88]	@ (8000324 <I2C1_Init+0x108>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a15      	ldr	r2, [pc, #84]	@ (8000324 <I2C1_Init+0x108>)
 80002ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80002d2:	6013      	str	r3, [r2, #0]
	I2C1_CR1 &= ~(1<<15);
 80002d4:	4b13      	ldr	r3, [pc, #76]	@ (8000324 <I2C1_Init+0x108>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a12      	ldr	r2, [pc, #72]	@ (8000324 <I2C1_Init+0x108>)
 80002da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80002de:	6013      	str	r3, [r2, #0]

	I2C1_CR2 |= (1<<4);
 80002e0:	4b11      	ldr	r3, [pc, #68]	@ (8000328 <I2C1_Init+0x10c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a10      	ldr	r2, [pc, #64]	@ (8000328 <I2C1_Init+0x10c>)
 80002e6:	f043 0310 	orr.w	r3, r3, #16
 80002ea:	6013      	str	r3, [r2, #0]
	I2C1_CCR = 80;
 80002ec:	4b0f      	ldr	r3, [pc, #60]	@ (800032c <I2C1_Init+0x110>)
 80002ee:	2250      	movs	r2, #80	@ 0x50
 80002f0:	601a      	str	r2, [r3, #0]
	I2C1_TRISE = 17;
 80002f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000330 <I2C1_Init+0x114>)
 80002f4:	2211      	movs	r2, #17
 80002f6:	601a      	str	r2, [r3, #0]

	I2C1_CR1 |= (1<<0);
 80002f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000324 <I2C1_Init+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a09      	ldr	r2, [pc, #36]	@ (8000324 <I2C1_Init+0x108>)
 80002fe:	f043 0301 	orr.w	r3, r3, #1
 8000302:	6013      	str	r3, [r2, #0]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40023830 	.word	0x40023830
 8000314:	40020400 	.word	0x40020400
 8000318:	40020404 	.word	0x40020404
 800031c:	4002040c 	.word	0x4002040c
 8000320:	40020424 	.word	0x40020424
 8000324:	40005400 	.word	0x40005400
 8000328:	40005404 	.word	0x40005404
 800032c:	4000541c 	.word	0x4000541c
 8000330:	40005420 	.word	0x40005420

08000334 <I2C1_Send>:

void I2C1_Send(char sadr, int n, char *str){
 8000334:	b480      	push	{r7}
 8000336:	b087      	sub	sp, #28
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	60b9      	str	r1, [r7, #8]
 800033e:	607a      	str	r2, [r7, #4]
 8000340:	73fb      	strb	r3, [r7, #15]
	while(I2C1_SR2 & (1<<1)){}
 8000342:	bf00      	nop
 8000344:	4b24      	ldr	r3, [pc, #144]	@ (80003d8 <I2C1_Send+0xa4>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	f003 0302 	and.w	r3, r3, #2
 800034c:	2b00      	cmp	r3, #0
 800034e:	d1f9      	bne.n	8000344 <I2C1_Send+0x10>

	I2C1_CR1 |=(1<<8);
 8000350:	4b22      	ldr	r3, [pc, #136]	@ (80003dc <I2C1_Send+0xa8>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a21      	ldr	r2, [pc, #132]	@ (80003dc <I2C1_Send+0xa8>)
 8000356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800035a:	6013      	str	r3, [r2, #0]

	while(!(I2C1_SR1 & (1<<0))){}
 800035c:	bf00      	nop
 800035e:	4b20      	ldr	r3, [pc, #128]	@ (80003e0 <I2C1_Send+0xac>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0f9      	beq.n	800035e <I2C1_Send+0x2a>

	I2C1_DR = (sadr<<1);
 800036a:	7bfb      	ldrb	r3, [r7, #15]
 800036c:	4a1d      	ldr	r2, [pc, #116]	@ (80003e4 <I2C1_Send+0xb0>)
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	6013      	str	r3, [r2, #0]

	while(!(I2C1_SR1 & (1<<1))){}
 8000372:	bf00      	nop
 8000374:	4b1a      	ldr	r3, [pc, #104]	@ (80003e0 <I2C1_Send+0xac>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	f003 0302 	and.w	r3, r3, #2
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0f9      	beq.n	8000374 <I2C1_Send+0x40>

	(void)I2C1_SR2;
 8000380:	4b15      	ldr	r3, [pc, #84]	@ (80003d8 <I2C1_Send+0xa4>)
 8000382:	681b      	ldr	r3, [r3, #0]

	for(int i=0; i<n; i++){
 8000384:	2300      	movs	r3, #0
 8000386:	617b      	str	r3, [r7, #20]
 8000388:	e00f      	b.n	80003aa <I2C1_Send+0x76>
		while(!(I2C1_SR1 & (1<<7))){}
 800038a:	bf00      	nop
 800038c:	4b14      	ldr	r3, [pc, #80]	@ (80003e0 <I2C1_Send+0xac>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000394:	2b00      	cmp	r3, #0
 8000396:	d0f9      	beq.n	800038c <I2C1_Send+0x58>
		I2C1_DR = *str++;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	1c5a      	adds	r2, r3, #1
 800039c:	607a      	str	r2, [r7, #4]
 800039e:	781a      	ldrb	r2, [r3, #0]
 80003a0:	4b10      	ldr	r3, [pc, #64]	@ (80003e4 <I2C1_Send+0xb0>)
 80003a2:	601a      	str	r2, [r3, #0]
	for(int i=0; i<n; i++){
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	3301      	adds	r3, #1
 80003a8:	617b      	str	r3, [r7, #20]
 80003aa:	697a      	ldr	r2, [r7, #20]
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	dbeb      	blt.n	800038a <I2C1_Send+0x56>
	}
	while(!(I2C1_SR1 & (1<<2))){}
 80003b2:	bf00      	nop
 80003b4:	4b0a      	ldr	r3, [pc, #40]	@ (80003e0 <I2C1_Send+0xac>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f003 0304 	and.w	r3, r3, #4
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d0f9      	beq.n	80003b4 <I2C1_Send+0x80>

	I2C1_CR1 |= (1<<9);
 80003c0:	4b06      	ldr	r3, [pc, #24]	@ (80003dc <I2C1_Send+0xa8>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a05      	ldr	r2, [pc, #20]	@ (80003dc <I2C1_Send+0xa8>)
 80003c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003ca:	6013      	str	r3, [r2, #0]

}
 80003cc:	bf00      	nop
 80003ce:	371c      	adds	r7, #28
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	40005418 	.word	0x40005418
 80003dc:	40005400 	.word	0x40005400
 80003e0:	40005414 	.word	0x40005414
 80003e4:	40005410 	.word	0x40005410

080003e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003ec:	bf00      	nop
 80003ee:	e7fd      	b.n	80003ec <NMI_Handler+0x4>

080003f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f4:	bf00      	nop
 80003f6:	e7fd      	b.n	80003f4 <HardFault_Handler+0x4>

080003f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003fc:	bf00      	nop
 80003fe:	e7fd      	b.n	80003fc <MemManage_Handler+0x4>

08000400 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000404:	bf00      	nop
 8000406:	e7fd      	b.n	8000404 <BusFault_Handler+0x4>

08000408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800040c:	bf00      	nop
 800040e:	e7fd      	b.n	800040c <UsageFault_Handler+0x4>

08000410 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr

0800041e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr

0800042c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr

0800043a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800043a:	b580      	push	{r7, lr}
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800043e:	f000 f83f 	bl	80004c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
	...

08000448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800044c:	4b06      	ldr	r3, [pc, #24]	@ (8000468 <SystemInit+0x20>)
 800044e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000452:	4a05      	ldr	r2, [pc, #20]	@ (8000468 <SystemInit+0x20>)
 8000454:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000458:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	e000ed00 	.word	0xe000ed00

0800046c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800046c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80004a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000470:	f7ff ffea 	bl	8000448 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000474:	480c      	ldr	r0, [pc, #48]	@ (80004a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000476:	490d      	ldr	r1, [pc, #52]	@ (80004ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000478:	4a0d      	ldr	r2, [pc, #52]	@ (80004b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800047c:	e002      	b.n	8000484 <LoopCopyDataInit>

0800047e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000482:	3304      	adds	r3, #4

08000484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000488:	d3f9      	bcc.n	800047e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048a:	4a0a      	ldr	r2, [pc, #40]	@ (80004b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800048c:	4c0a      	ldr	r4, [pc, #40]	@ (80004b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800048e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000490:	e001      	b.n	8000496 <LoopFillZerobss>

08000492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000494:	3204      	adds	r2, #4

08000496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000498:	d3fb      	bcc.n	8000492 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800049a:	f000 f825 	bl	80004e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800049e:	f7ff feb1 	bl	8000204 <main>
  bx  lr    
 80004a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80004a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004ac:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004b0:	08000558 	.word	0x08000558
  ldr r2, =_sbss
 80004b4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004b8:	20000024 	.word	0x20000024

080004bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004bc:	e7fe      	b.n	80004bc <ADC_IRQHandler>
	...

080004c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004c4:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <HAL_IncTick+0x20>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	461a      	mov	r2, r3
 80004ca:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <HAL_IncTick+0x24>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4413      	add	r3, r2
 80004d0:	4a04      	ldr	r2, [pc, #16]	@ (80004e4 <HAL_IncTick+0x24>)
 80004d2:	6013      	str	r3, [r2, #0]
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	20000000 	.word	0x20000000
 80004e4:	20000020 	.word	0x20000020

080004e8 <__libc_init_array>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	4d0d      	ldr	r5, [pc, #52]	@ (8000520 <__libc_init_array+0x38>)
 80004ec:	4c0d      	ldr	r4, [pc, #52]	@ (8000524 <__libc_init_array+0x3c>)
 80004ee:	1b64      	subs	r4, r4, r5
 80004f0:	10a4      	asrs	r4, r4, #2
 80004f2:	2600      	movs	r6, #0
 80004f4:	42a6      	cmp	r6, r4
 80004f6:	d109      	bne.n	800050c <__libc_init_array+0x24>
 80004f8:	4d0b      	ldr	r5, [pc, #44]	@ (8000528 <__libc_init_array+0x40>)
 80004fa:	4c0c      	ldr	r4, [pc, #48]	@ (800052c <__libc_init_array+0x44>)
 80004fc:	f000 f818 	bl	8000530 <_init>
 8000500:	1b64      	subs	r4, r4, r5
 8000502:	10a4      	asrs	r4, r4, #2
 8000504:	2600      	movs	r6, #0
 8000506:	42a6      	cmp	r6, r4
 8000508:	d105      	bne.n	8000516 <__libc_init_array+0x2e>
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000510:	4798      	blx	r3
 8000512:	3601      	adds	r6, #1
 8000514:	e7ee      	b.n	80004f4 <__libc_init_array+0xc>
 8000516:	f855 3b04 	ldr.w	r3, [r5], #4
 800051a:	4798      	blx	r3
 800051c:	3601      	adds	r6, #1
 800051e:	e7f2      	b.n	8000506 <__libc_init_array+0x1e>
 8000520:	08000550 	.word	0x08000550
 8000524:	08000550 	.word	0x08000550
 8000528:	08000550 	.word	0x08000550
 800052c:	08000554 	.word	0x08000554

08000530 <_init>:
 8000530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000532:	bf00      	nop
 8000534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000536:	bc08      	pop	{r3}
 8000538:	469e      	mov	lr, r3
 800053a:	4770      	bx	lr

0800053c <_fini>:
 800053c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053e:	bf00      	nop
 8000540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000542:	bc08      	pop	{r3}
 8000544:	469e      	mov	lr, r3
 8000546:	4770      	bx	lr
